name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # 환경변수 설정
  GIT_SHA: ${{ github.sha }}
  BUILD_TIME: ${{ github.event.head_commit.timestamp }}
  HARBOR_REGISTRY: localhost:30002
  HARBOR_PROJECT: spring-cdcd
  IMAGE_NAME: my-app

# 작업 목록
jobs:
  test-job:
    # setting > action 에서 설정한 러너로 사용하도록 수정
    runs-on: self-hosted
    steps:
      - name: 코드 받기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 권한 오류 막기 위한 설정
      - name: Gradle 권한 부여
        run: chmod +x ./gradlew

      - name: 환경 변수 확인
        run: |
          echo "GIT_SHA: $GIT_SHA"
          echo "BUILD_TIME $BUILD_TIME"
          echo "Current time $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
      - name: 테스트 실행
        run: ./gradlew test
        env:
          GIT_SHA: ${{ env.GIT_SHA }}
          BUILD_TIME: ${{ env.BUILD_TIME }}

  build-push:
    runs-on: self-hosted
    needs: test-job        # test-job 완료 후 실행
    steps:
      - name: 코드 받기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 권한 오류 막기 위한 설정
      - name: Gradle 권한 부여
        run: chmod +x ./gradlew

      # 인증 오류로 에러 발생
      - name: Docker 설정 초기화
        run: |
          echo "🔧 Docker credential 문제 해결..."
          
          # Docker config 디렉토리와 파일 생성
          mkdir -p ~/.docker
          
          cat > ~/.docker/config.json << EOF
          {
            "auths": {}
          }
          EOF

      - name: Harbor 로그인
        run: |
          curl -f http://${{ env.HARBOR_REGISTRY }}/api/v2.0/health || {
          echo "❌ Harbor에 접근할 수 없습니다!"
          exit 1
          }
          
          HARBOR_PASSWORD=$(kubectl get secret harbor-admin-secret -n harbor-system -o jsonpath='{.data.password}' | base64 -d)

      # 실행 단계 run 명령어
      - name: 빌드 실행
        run: ./gradlew clean build --no-daemon
        env:
          GIT_SHA: ${{ env.GIT_SHA }}
          BUILD_TIME: ${{ env.BUILD_TIME }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          # 이미지 태그 생성
          if [ "${{ github.ref_name }}" = "main" ]; then
            TAG="latest"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          IMAGE_TAG="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${TAG}"
          SHA_TAG="${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # 이미지 빌드
          docker build -t $IMAGE_TAG -t $SHA_TAG .
          
          # 이미지 푸시
          docker push $IMAGE_TAG
          docker push $SHA_TAG
          
          echo "Tags: $TAG, ${{ github.sha }}"
  
